import { ElementRef, AfterViewChecked, OnDestroy, Renderer2, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { MenuItem } from 'primeng/api';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/router';
export declare class SlideMenuSub implements OnDestroy {
    item: MenuItem;
    root: boolean;
    backLabel: string;
    menuWidth: number;
    effectDuration: any;
    easing: string;
    index: number;
    slideMenu: SlideMenu;
    constructor(slideMenu: any);
    activeItem: any;
    itemClick(event: any, item: MenuItem, listitem: any): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SlideMenuSub, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SlideMenuSub, "p-slideMenuSub", never, { "backLabel": "backLabel"; "easing": "easing"; "item": "item"; "root": "root"; "menuWidth": "menuWidth"; "effectDuration": "effectDuration"; "index": "index"; }, {}, never, never>;
}
export declare class SlideMenu implements AfterViewChecked, OnDestroy {
    el: ElementRef;
    renderer: Renderer2;
    cd: ChangeDetectorRef;
    model: MenuItem[];
    popup: boolean;
    style: any;
    styleClass: string;
    menuWidth: number;
    viewportHeight: number;
    effectDuration: any;
    easing: string;
    backLabel: string;
    appendTo: any;
    autoZIndex: boolean;
    baseZIndex: number;
    showTransitionOptions: string;
    hideTransitionOptions: string;
    onShow: EventEmitter<any>;
    onHide: EventEmitter<any>;
    containerViewChild: ElementRef;
    backwardViewChild: ElementRef;
    slideMenuContentViewChild: ElementRef;
    documentClickListener: any;
    documentResizeListener: any;
    preventDocumentDefault: boolean;
    scrollHandler: any;
    left: number;
    animating: boolean;
    target: any;
    visible: boolean;
    viewportUpdated: boolean;
    constructor(el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef);
    ngAfterViewChecked(): void;
    set container(element: ElementRef);
    set backward(element: ElementRef);
    set slideMenuContent(element: ElementRef);
    updateViewPort(): void;
    toggle(event: any): void;
    show(event: any): void;
    onOverlayAnimationStart(event: AnimationEvent): void;
    appendOverlay(): void;
    restoreOverlayAppend(): void;
    moveOnTop(): void;
    hide(): void;
    onWindowResize(): void;
    onClick(event: any): void;
    goBack(): void;
    bindDocumentClickListener(): void;
    unbindDocumentClickListener(): void;
    bindDocumentResizeListener(): void;
    unbindDocumentResizeListener(): void;
    bindScrollListener(): void;
    unbindScrollListener(): void;
    onOverlayHide(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SlideMenu, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SlideMenu, "p-slideMenu", never, { "menuWidth": "menuWidth"; "viewportHeight": "viewportHeight"; "effectDuration": "effectDuration"; "easing": "easing"; "backLabel": "backLabel"; "autoZIndex": "autoZIndex"; "baseZIndex": "baseZIndex"; "showTransitionOptions": "showTransitionOptions"; "hideTransitionOptions": "hideTransitionOptions"; "model": "model"; "popup": "popup"; "style": "style"; "styleClass": "styleClass"; "appendTo": "appendTo"; }, { "onShow": "onShow"; "onHide": "onHide"; }, never, never>;
}
export declare class SlideMenuModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<SlideMenuModule, [typeof SlideMenu, typeof SlideMenuSub], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.RouterModule], [typeof SlideMenu, typeof ɵngcc2.RouterModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<SlideMenuModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVtZW51LmQudHMiLCJzb3VyY2VzIjpbInNsaWRlbWVudS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3Q2hlY2tlZCwgT25EZXN0cm95LCBSZW5kZXJlcjIsIEV2ZW50RW1pdHRlciwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuaW1hdGlvbkV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBNZW51SXRlbSB9IGZyb20gJ3ByaW1lbmcvYXBpJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNsaWRlTWVudVN1YiBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgaXRlbTogTWVudUl0ZW07XG4gICAgcm9vdDogYm9vbGVhbjtcbiAgICBiYWNrTGFiZWw6IHN0cmluZztcbiAgICBtZW51V2lkdGg6IG51bWJlcjtcbiAgICBlZmZlY3REdXJhdGlvbjogYW55O1xuICAgIGVhc2luZzogc3RyaW5nO1xuICAgIGluZGV4OiBudW1iZXI7XG4gICAgc2xpZGVNZW51OiBTbGlkZU1lbnU7XG4gICAgY29uc3RydWN0b3Ioc2xpZGVNZW51OiBhbnkpO1xuICAgIGFjdGl2ZUl0ZW06IGFueTtcbiAgICBpdGVtQ2xpY2soZXZlbnQ6IGFueSwgaXRlbTogTWVudUl0ZW0sIGxpc3RpdGVtOiBhbnkpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTbGlkZU1lbnUgaW1wbGVtZW50cyBBZnRlclZpZXdDaGVja2VkLCBPbkRlc3Ryb3kge1xuICAgIGVsOiBFbGVtZW50UmVmO1xuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgY2Q6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIG1vZGVsOiBNZW51SXRlbVtdO1xuICAgIHBvcHVwOiBib29sZWFuO1xuICAgIHN0eWxlOiBhbnk7XG4gICAgc3R5bGVDbGFzczogc3RyaW5nO1xuICAgIG1lbnVXaWR0aDogbnVtYmVyO1xuICAgIHZpZXdwb3J0SGVpZ2h0OiBudW1iZXI7XG4gICAgZWZmZWN0RHVyYXRpb246IGFueTtcbiAgICBlYXNpbmc6IHN0cmluZztcbiAgICBiYWNrTGFiZWw6IHN0cmluZztcbiAgICBhcHBlbmRUbzogYW55O1xuICAgIGF1dG9aSW5kZXg6IGJvb2xlYW47XG4gICAgYmFzZVpJbmRleDogbnVtYmVyO1xuICAgIHNob3dUcmFuc2l0aW9uT3B0aW9uczogc3RyaW5nO1xuICAgIGhpZGVUcmFuc2l0aW9uT3B0aW9uczogc3RyaW5nO1xuICAgIG9uU2hvdzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25IaWRlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb250YWluZXJWaWV3Q2hpbGQ6IEVsZW1lbnRSZWY7XG4gICAgYmFja3dhcmRWaWV3Q2hpbGQ6IEVsZW1lbnRSZWY7XG4gICAgc2xpZGVNZW51Q29udGVudFZpZXdDaGlsZDogRWxlbWVudFJlZjtcbiAgICBkb2N1bWVudENsaWNrTGlzdGVuZXI6IGFueTtcbiAgICBkb2N1bWVudFJlc2l6ZUxpc3RlbmVyOiBhbnk7XG4gICAgcHJldmVudERvY3VtZW50RGVmYXVsdDogYm9vbGVhbjtcbiAgICBzY3JvbGxIYW5kbGVyOiBhbnk7XG4gICAgbGVmdDogbnVtYmVyO1xuICAgIGFuaW1hdGluZzogYm9vbGVhbjtcbiAgICB0YXJnZXQ6IGFueTtcbiAgICB2aXNpYmxlOiBib29sZWFuO1xuICAgIHZpZXdwb3J0VXBkYXRlZDogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICBzZXQgY29udGFpbmVyKGVsZW1lbnQ6IEVsZW1lbnRSZWYpO1xuICAgIHNldCBiYWNrd2FyZChlbGVtZW50OiBFbGVtZW50UmVmKTtcbiAgICBzZXQgc2xpZGVNZW51Q29udGVudChlbGVtZW50OiBFbGVtZW50UmVmKTtcbiAgICB1cGRhdGVWaWV3UG9ydCgpOiB2b2lkO1xuICAgIHRvZ2dsZShldmVudDogYW55KTogdm9pZDtcbiAgICBzaG93KGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uT3ZlcmxheUFuaW1hdGlvblN0YXJ0KGV2ZW50OiBBbmltYXRpb25FdmVudCk6IHZvaWQ7XG4gICAgYXBwZW5kT3ZlcmxheSgpOiB2b2lkO1xuICAgIHJlc3RvcmVPdmVybGF5QXBwZW5kKCk6IHZvaWQ7XG4gICAgbW92ZU9uVG9wKCk6IHZvaWQ7XG4gICAgaGlkZSgpOiB2b2lkO1xuICAgIG9uV2luZG93UmVzaXplKCk6IHZvaWQ7XG4gICAgb25DbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICBnb0JhY2soKTogdm9pZDtcbiAgICBiaW5kRG9jdW1lbnRDbGlja0xpc3RlbmVyKCk6IHZvaWQ7XG4gICAgdW5iaW5kRG9jdW1lbnRDbGlja0xpc3RlbmVyKCk6IHZvaWQ7XG4gICAgYmluZERvY3VtZW50UmVzaXplTGlzdGVuZXIoKTogdm9pZDtcbiAgICB1bmJpbmREb2N1bWVudFJlc2l6ZUxpc3RlbmVyKCk6IHZvaWQ7XG4gICAgYmluZFNjcm9sbExpc3RlbmVyKCk6IHZvaWQ7XG4gICAgdW5iaW5kU2Nyb2xsTGlzdGVuZXIoKTogdm9pZDtcbiAgICBvbk92ZXJsYXlIaWRlKCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNsaWRlTWVudU1vZHVsZSB7XG59XG4iXX0=