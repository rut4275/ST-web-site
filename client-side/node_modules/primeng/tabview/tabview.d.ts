import { ElementRef, OnDestroy, EventEmitter, AfterContentInit, QueryList, TemplateRef, EmbeddedViewRef, ViewContainerRef, ChangeDetectorRef, AfterViewChecked } from '@angular/core';
import { BlockableUI } from 'primeng/api';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/api';
import * as ɵngcc3 from 'primeng/tooltip';
import * as ɵngcc4 from 'primeng/ripple';
export declare class TabPanel implements AfterContentInit, OnDestroy {
    viewContainer: ViewContainerRef;
    cd: ChangeDetectorRef;
    header: string;
    closable: boolean;
    headerStyle: any;
    headerStyleClass: string;
    leftIcon: string;
    rightIcon: string;
    cache: boolean;
    tooltip: any;
    tooltipPosition: string;
    tooltipPositionStyle: string;
    tooltipStyleClass: string;
    templates: QueryList<any>;
    closed: boolean;
    view: EmbeddedViewRef<any>;
    _selected: boolean;
    _disabled: boolean;
    loaded: boolean;
    id: string;
    contentTemplate: TemplateRef<any>;
    headerTemplate: TemplateRef<any>;
    tabView: TabView;
    constructor(tabView: any, viewContainer: ViewContainerRef, cd: ChangeDetectorRef);
    ngAfterContentInit(): void;
    get selected(): boolean;
    set selected(val: boolean);
    get disabled(): boolean;
    set disabled(disabled: boolean);
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TabPanel, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TabPanel, "p-tabPanel", never, { "cache": "cache"; "tooltipPosition": "tooltipPosition"; "tooltipPositionStyle": "tooltipPositionStyle"; "selected": "selected"; "disabled": "disabled"; "header": "header"; "closable": "closable"; "headerStyle": "headerStyle"; "headerStyleClass": "headerStyleClass"; "leftIcon": "leftIcon"; "rightIcon": "rightIcon"; "tooltip": "tooltip"; "tooltipStyleClass": "tooltipStyleClass"; }, {}, ["templates"], ["*"]>;
}
export declare class TabView implements AfterContentInit, AfterViewChecked, BlockableUI {
    el: ElementRef;
    cd: ChangeDetectorRef;
    orientation: string;
    style: any;
    styleClass: string;
    controlClose: boolean;
    navbar: ElementRef;
    inkbar: ElementRef;
    tabPanels: QueryList<TabPanel>;
    onChange: EventEmitter<any>;
    onClose: EventEmitter<any>;
    activeIndexChange: EventEmitter<number>;
    initialized: boolean;
    tabs: TabPanel[];
    _activeIndex: number;
    preventActiveIndexPropagation: boolean;
    tabChanged: boolean;
    constructor(el: ElementRef, cd: ChangeDetectorRef);
    ngAfterContentInit(): void;
    ngAfterViewChecked(): void;
    initTabs(): void;
    open(event: Event, tab: TabPanel): void;
    close(event: Event, tab: TabPanel): void;
    closeTab(tab: TabPanel): void;
    findSelectedTab(): TabPanel;
    findTabIndex(tab: TabPanel): number;
    getBlockableElement(): HTMLElement;
    get activeIndex(): number;
    set activeIndex(val: number);
    updateInkBar(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TabView, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TabView, "p-tabView", never, { "orientation": "orientation"; "activeIndex": "activeIndex"; "style": "style"; "styleClass": "styleClass"; "controlClose": "controlClose"; }, { "onChange": "onChange"; "onClose": "onClose"; "activeIndexChange": "activeIndexChange"; }, ["tabPanels"], ["*"]>;
}
export declare class TabViewModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<TabViewModule, [typeof TabView, typeof TabPanel], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.SharedModule, typeof ɵngcc3.TooltipModule, typeof ɵngcc4.RippleModule], [typeof TabView, typeof TabPanel, typeof ɵngcc2.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<TabViewModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFidmlldy5kLnRzIiwic291cmNlcyI6WyJ0YWJ2aWV3LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIEFmdGVyQ29udGVudEluaXQsIFF1ZXJ5TGlzdCwgVGVtcGxhdGVSZWYsIEVtYmVkZGVkVmlld1JlZiwgVmlld0NvbnRhaW5lclJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEFmdGVyVmlld0NoZWNrZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJsb2NrYWJsZVVJIH0gZnJvbSAncHJpbWVuZy9hcGknO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGFiUGFuZWwgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICAgIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWY7XG4gICAgY2Q6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIGhlYWRlcjogc3RyaW5nO1xuICAgIGNsb3NhYmxlOiBib29sZWFuO1xuICAgIGhlYWRlclN0eWxlOiBhbnk7XG4gICAgaGVhZGVyU3R5bGVDbGFzczogc3RyaW5nO1xuICAgIGxlZnRJY29uOiBzdHJpbmc7XG4gICAgcmlnaHRJY29uOiBzdHJpbmc7XG4gICAgY2FjaGU6IGJvb2xlYW47XG4gICAgdG9vbHRpcDogYW55O1xuICAgIHRvb2x0aXBQb3NpdGlvbjogc3RyaW5nO1xuICAgIHRvb2x0aXBQb3NpdGlvblN0eWxlOiBzdHJpbmc7XG4gICAgdG9vbHRpcFN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICB0ZW1wbGF0ZXM6IFF1ZXJ5TGlzdDxhbnk+O1xuICAgIGNsb3NlZDogYm9vbGVhbjtcbiAgICB2aWV3OiBFbWJlZGRlZFZpZXdSZWY8YW55PjtcbiAgICBfc2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgX2Rpc2FibGVkOiBib29sZWFuO1xuICAgIGxvYWRlZDogYm9vbGVhbjtcbiAgICBpZDogc3RyaW5nO1xuICAgIGNvbnRlbnRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBoZWFkZXJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICB0YWJWaWV3OiBUYWJWaWV3O1xuICAgIGNvbnN0cnVjdG9yKHRhYlZpZXc6IGFueSwgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZiwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBnZXQgc2VsZWN0ZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgc2VsZWN0ZWQodmFsOiBib29sZWFuKTtcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgZGlzYWJsZWQoZGlzYWJsZWQ6IGJvb2xlYW4pO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUYWJWaWV3IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZCwgQmxvY2thYmxlVUkge1xuICAgIGVsOiBFbGVtZW50UmVmO1xuICAgIGNkOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBvcmllbnRhdGlvbjogc3RyaW5nO1xuICAgIHN0eWxlOiBhbnk7XG4gICAgc3R5bGVDbGFzczogc3RyaW5nO1xuICAgIGNvbnRyb2xDbG9zZTogYm9vbGVhbjtcbiAgICBuYXZiYXI6IEVsZW1lbnRSZWY7XG4gICAgaW5rYmFyOiBFbGVtZW50UmVmO1xuICAgIHRhYlBhbmVsczogUXVlcnlMaXN0PFRhYlBhbmVsPjtcbiAgICBvbkNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25DbG9zZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYWN0aXZlSW5kZXhDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIGluaXRpYWxpemVkOiBib29sZWFuO1xuICAgIHRhYnM6IFRhYlBhbmVsW107XG4gICAgX2FjdGl2ZUluZGV4OiBudW1iZXI7XG4gICAgcHJldmVudEFjdGl2ZUluZGV4UHJvcGFnYXRpb246IGJvb2xlYW47XG4gICAgdGFiQ2hhbmdlZDogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICBpbml0VGFicygpOiB2b2lkO1xuICAgIG9wZW4oZXZlbnQ6IEV2ZW50LCB0YWI6IFRhYlBhbmVsKTogdm9pZDtcbiAgICBjbG9zZShldmVudDogRXZlbnQsIHRhYjogVGFiUGFuZWwpOiB2b2lkO1xuICAgIGNsb3NlVGFiKHRhYjogVGFiUGFuZWwpOiB2b2lkO1xuICAgIGZpbmRTZWxlY3RlZFRhYigpOiBUYWJQYW5lbDtcbiAgICBmaW5kVGFiSW5kZXgodGFiOiBUYWJQYW5lbCk6IG51bWJlcjtcbiAgICBnZXRCbG9ja2FibGVFbGVtZW50KCk6IEhUTUxFbGVtZW50O1xuICAgIGdldCBhY3RpdmVJbmRleCgpOiBudW1iZXI7XG4gICAgc2V0IGFjdGl2ZUluZGV4KHZhbDogbnVtYmVyKTtcbiAgICB1cGRhdGVJbmtCYXIoKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRhYlZpZXdNb2R1bGUge1xufVxuIl19