import { ElementRef, EventEmitter, AfterContentInit, QueryList, TemplateRef, ChangeDetectorRef } from '@angular/core';
import { SelectItem } from 'primeng/api';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/api';
import * as ɵngcc3 from 'primeng/ripple';
export declare const LISTBOX_VALUE_ACCESSOR: any;
export declare class Listbox implements AfterContentInit, ControlValueAccessor {
    el: ElementRef;
    cd: ChangeDetectorRef;
    multiple: boolean;
    style: any;
    styleClass: string;
    listStyle: any;
    listStyleClass: string;
    readonly: boolean;
    disabled: boolean;
    checkbox: boolean;
    filter: boolean;
    filterMode: string;
    filterLocale: string;
    metaKeySelection: boolean;
    dataKey: string;
    showToggleAll: boolean;
    optionLabel: string;
    ariaFilterLabel: string;
    filterPlaceHolder: string;
    onChange: EventEmitter<any>;
    onClick: EventEmitter<any>;
    onDblClick: EventEmitter<any>;
    headerCheckboxViewChild: ElementRef;
    headerFacet: any;
    footerFacet: any;
    templates: QueryList<any>;
    itemTemplate: TemplateRef<any>;
    headerTemplate: TemplateRef<any>;
    footerTemplate: TemplateRef<any>;
    _filterValue: string;
    filtered: boolean;
    value: any;
    onModelChange: Function;
    onModelTouched: Function;
    optionTouched: boolean;
    focus: boolean;
    _options: any[];
    headerCheckboxFocus: boolean;
    disabledSelectedOptions: SelectItem[];
    constructor(el: ElementRef, cd: ChangeDetectorRef);
    get options(): any[];
    set options(val: any[]);
    get filterValue(): string;
    set filterValue(val: string);
    ngAfterContentInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    onOptionClick(event: any, option: any): void;
    onOptionTouchEnd(event: any, option: any): void;
    onOptionDoubleClick(event: Event, option: SelectItem): any;
    onOptionClickSingle(event: any, option: any): void;
    onOptionClickMultiple(event: any, option: any): void;
    onOptionClickCheckbox(event: any, option: any): void;
    removeOption(option: any): void;
    isSelected(option: SelectItem): boolean;
    get allChecked(): boolean;
    getEnabledOptionCount(): number;
    allFilteredSelected(): boolean;
    onFilter(event: any): void;
    toggleAll(event: any): void;
    isItemVisible(option: SelectItem): boolean;
    onOptionKeyDown(event: KeyboardEvent, option: any): void;
    findNextItem(item: any): any;
    findPrevItem(item: any): any;
    getFilteredOptions(): any[];
    onHeaderCheckboxFocus(): void;
    onHeaderCheckboxBlur(): void;
    setDisabledSelectedOptions(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Listbox, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Listbox, "p-listbox", never, { "checkbox": "checkbox"; "filter": "filter"; "filterMode": "filterMode"; "metaKeySelection": "metaKeySelection"; "showToggleAll": "showToggleAll"; "options": "options"; "filterValue": "filterValue"; "disabled": "disabled"; "multiple": "multiple"; "style": "style"; "styleClass": "styleClass"; "listStyle": "listStyle"; "listStyleClass": "listStyleClass"; "readonly": "readonly"; "filterLocale": "filterLocale"; "dataKey": "dataKey"; "optionLabel": "optionLabel"; "ariaFilterLabel": "ariaFilterLabel"; "filterPlaceHolder": "filterPlaceHolder"; }, { "onChange": "onChange"; "onClick": "onClick"; "onDblClick": "onDblClick"; }, ["headerFacet", "footerFacet", "templates"], ["p-header", "p-footer"]>;
}
export declare class ListboxModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<ListboxModule, [typeof Listbox], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.SharedModule, typeof ɵngcc3.RippleModule], [typeof Listbox, typeof ɵngcc2.SharedModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<ListboxModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdGJveC5kLnRzIiwic291cmNlcyI6WyJsaXN0Ym94LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOzs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEFmdGVyQ29udGVudEluaXQsIFF1ZXJ5TGlzdCwgVGVtcGxhdGVSZWYsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTZWxlY3RJdGVtIH0gZnJvbSAncHJpbWVuZy9hcGknO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBMSVNUQk9YX1ZBTFVFX0FDQ0VTU09SOiBhbnk7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMaXN0Ym94IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAgIGVsOiBFbGVtZW50UmVmO1xuICAgIGNkOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBtdWx0aXBsZTogYm9vbGVhbjtcbiAgICBzdHlsZTogYW55O1xuICAgIHN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBsaXN0U3R5bGU6IGFueTtcbiAgICBsaXN0U3R5bGVDbGFzczogc3RyaW5nO1xuICAgIHJlYWRvbmx5OiBib29sZWFuO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIGNoZWNrYm94OiBib29sZWFuO1xuICAgIGZpbHRlcjogYm9vbGVhbjtcbiAgICBmaWx0ZXJNb2RlOiBzdHJpbmc7XG4gICAgZmlsdGVyTG9jYWxlOiBzdHJpbmc7XG4gICAgbWV0YUtleVNlbGVjdGlvbjogYm9vbGVhbjtcbiAgICBkYXRhS2V5OiBzdHJpbmc7XG4gICAgc2hvd1RvZ2dsZUFsbDogYm9vbGVhbjtcbiAgICBvcHRpb25MYWJlbDogc3RyaW5nO1xuICAgIGFyaWFGaWx0ZXJMYWJlbDogc3RyaW5nO1xuICAgIGZpbHRlclBsYWNlSG9sZGVyOiBzdHJpbmc7XG4gICAgb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRGJsQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGhlYWRlckNoZWNrYm94Vmlld0NoaWxkOiBFbGVtZW50UmVmO1xuICAgIGhlYWRlckZhY2V0OiBhbnk7XG4gICAgZm9vdGVyRmFjZXQ6IGFueTtcbiAgICB0ZW1wbGF0ZXM6IFF1ZXJ5TGlzdDxhbnk+O1xuICAgIGl0ZW1UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBoZWFkZXJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBmb290ZXJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBfZmlsdGVyVmFsdWU6IHN0cmluZztcbiAgICBmaWx0ZXJlZDogYm9vbGVhbjtcbiAgICB2YWx1ZTogYW55O1xuICAgIG9uTW9kZWxDaGFuZ2U6IEZ1bmN0aW9uO1xuICAgIG9uTW9kZWxUb3VjaGVkOiBGdW5jdGlvbjtcbiAgICBvcHRpb25Ub3VjaGVkOiBib29sZWFuO1xuICAgIGZvY3VzOiBib29sZWFuO1xuICAgIF9vcHRpb25zOiBhbnlbXTtcbiAgICBoZWFkZXJDaGVja2JveEZvY3VzOiBib29sZWFuO1xuICAgIGRpc2FibGVkU2VsZWN0ZWRPcHRpb25zOiBTZWxlY3RJdGVtW107XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgZ2V0IG9wdGlvbnMoKTogYW55W107XG4gICAgc2V0IG9wdGlvbnModmFsOiBhbnlbXSk7XG4gICAgZ2V0IGZpbHRlclZhbHVlKCk6IHN0cmluZztcbiAgICBzZXQgZmlsdGVyVmFsdWUodmFsOiBzdHJpbmcpO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZSh2YWw6IGJvb2xlYW4pOiB2b2lkO1xuICAgIG9uT3B0aW9uQ2xpY2soZXZlbnQ6IGFueSwgb3B0aW9uOiBhbnkpOiB2b2lkO1xuICAgIG9uT3B0aW9uVG91Y2hFbmQoZXZlbnQ6IGFueSwgb3B0aW9uOiBhbnkpOiB2b2lkO1xuICAgIG9uT3B0aW9uRG91YmxlQ2xpY2soZXZlbnQ6IEV2ZW50LCBvcHRpb246IFNlbGVjdEl0ZW0pOiBhbnk7XG4gICAgb25PcHRpb25DbGlja1NpbmdsZShldmVudDogYW55LCBvcHRpb246IGFueSk6IHZvaWQ7XG4gICAgb25PcHRpb25DbGlja011bHRpcGxlKGV2ZW50OiBhbnksIG9wdGlvbjogYW55KTogdm9pZDtcbiAgICBvbk9wdGlvbkNsaWNrQ2hlY2tib3goZXZlbnQ6IGFueSwgb3B0aW9uOiBhbnkpOiB2b2lkO1xuICAgIHJlbW92ZU9wdGlvbihvcHRpb246IGFueSk6IHZvaWQ7XG4gICAgaXNTZWxlY3RlZChvcHRpb246IFNlbGVjdEl0ZW0pOiBib29sZWFuO1xuICAgIGdldCBhbGxDaGVja2VkKCk6IGJvb2xlYW47XG4gICAgZ2V0RW5hYmxlZE9wdGlvbkNvdW50KCk6IG51bWJlcjtcbiAgICBhbGxGaWx0ZXJlZFNlbGVjdGVkKCk6IGJvb2xlYW47XG4gICAgb25GaWx0ZXIoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgdG9nZ2xlQWxsKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGlzSXRlbVZpc2libGUob3B0aW9uOiBTZWxlY3RJdGVtKTogYm9vbGVhbjtcbiAgICBvbk9wdGlvbktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQsIG9wdGlvbjogYW55KTogdm9pZDtcbiAgICBmaW5kTmV4dEl0ZW0oaXRlbTogYW55KTogYW55O1xuICAgIGZpbmRQcmV2SXRlbShpdGVtOiBhbnkpOiBhbnk7XG4gICAgZ2V0RmlsdGVyZWRPcHRpb25zKCk6IGFueVtdO1xuICAgIG9uSGVhZGVyQ2hlY2tib3hGb2N1cygpOiB2b2lkO1xuICAgIG9uSGVhZGVyQ2hlY2tib3hCbHVyKCk6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTZWxlY3RlZE9wdGlvbnMoKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIExpc3Rib3hNb2R1bGUge1xufVxuIl19